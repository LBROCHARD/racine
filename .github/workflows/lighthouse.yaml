
name: Lighthouse CI

on :
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'
        
      - name: Install packages
        run: npm ci

      - name: Build Project
        run: npm run build


      # - name: run Lighthouse CI
      #   run: |
      #     npm install -g @lhci/cli@0.15.x
      #     lhci autorun --upload.target=temporary-public-storage || echo "LHCI failed!"
      #   env:
      #     LHCI_GITHUB_APP_TOKEN: $
          
      - name: Run Lighthouse CI
        run: npx @lhci/cli autorun --config=./lighthouserc.js || echo "LHCI failed!"

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
            name: lighthouse-report
            path: .lighthouseci/reports

      - name: Comment (or update) PR with Lighthouse summary
        if: github.event.pull_request
        uses: actions/github-script@v7
        env:
            PREVIEW_URL: "https://metemotion.onrender.com"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const fs = require('fs');
                const { owner, repo } = context.repo;
                const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

                const path = './lhci-report/manifest.json';
                const summary = JSON.parse(fs.readFileSync(path, 'utf8'));

                const toEmoji = (score) => {
                  const percent = Math.round(score * 100);
                  if (percent >= 90) return 'ðŸŸ¢';
                  if (percent >= 50) return 'ðŸŸ ';
                  return 'ðŸ”´';
                };

                const formatScore = (value) => Math.round(value * 100);

                const makeRow = (entry) => {
                  const { url, summary: s } = entry;
                  const path = new URL(url).pathname;
                  return `| [\`${path}\`](${url}) | ${toEmoji(s.performance)} ${formatScore(s.performance)} | ${toEmoji(s.accessibility)} ${formatScore(s.accessibility)} | ${toEmoji(s['best-practices'])} ${formatScore(s['best-practices'])} | ${toEmoji(s.seo)} ${formatScore(s.seo)} |`;
                };

                const rows = summary.map(makeRow).join('\n');

                const legend = `ðŸ”´ <50 (Ã  amÃ©liorer) | ðŸŸ  50â€“89 (moyen) | ðŸŸ¢ â‰¥90 (bon)`;

                const body = [
                  '## ðŸ“Š Lighthouse report',
                  '',
                  '| Page | Performance | Accessibility | Best Practices | SEO |',
                  '|------|-------------|----------------|----------------|-----|',
                  rows,
                  '',
                  legend,
                  '',
                  `ðŸ“Ž [Consulter le rapport complet (actions)](${runUrl})`
                ].join('\n');

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: context.issue.number,
                  body
                });